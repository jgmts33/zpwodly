/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    JWT,
    JWTFromJSON,
    JWTToJSON,
    Login,
    LoginFromJSON,
    LoginToJSON,
    PasswordChange,
    PasswordChangeFromJSON,
    PasswordChangeToJSON,
    PasswordReset,
    PasswordResetFromJSON,
    PasswordResetToJSON,
    PasswordResetConfirm,
    PasswordResetConfirmFromJSON,
    PasswordResetConfirmToJSON,
    Register,
    RegisterFromJSON,
    RegisterToJSON,
    TokenObtainPair,
    TokenObtainPairFromJSON,
    TokenObtainPairToJSON,
    TokenRefresh,
    TokenRefreshFromJSON,
    TokenRefreshToJSON,
    TokenVerify,
    TokenVerifyFromJSON,
    TokenVerifyToJSON,
    UserDetails,
    UserDetailsFromJSON,
    UserDetailsToJSON,
    VerifyEmail,
    VerifyEmailFromJSON,
    VerifyEmailToJSON,
} from '../models';

export interface CreateLoginRequest {
    login?: Login;
}

export interface CreateLogoutRequest {
    body?: any | null;
}

export interface CreatePasswordChangeRequest {
    passwordChange?: PasswordChange;
}

export interface CreatePasswordResetRequest {
    passwordReset?: PasswordReset;
}

export interface CreatePasswordResetConfirmRequest {
    passwordResetConfirm?: PasswordResetConfirm;
}

export interface CreateRegisterRequest {
    register?: Register;
}

export interface CreateTokenObtainPairRequest {
    tokenObtainPair?: TokenObtainPair;
}

export interface CreateTokenRefreshRequest {
    tokenRefresh?: TokenRefresh;
}

export interface CreateTokenVerifyRequest {
    tokenVerify?: TokenVerify;
}

export interface CreateVerifyEmailRequest {
    verifyEmail?: VerifyEmail;
}

export interface PartialUpdateUserDetailsRequest {
    userDetails?: UserDetails;
}

export interface UpdateUserDetailsRequest {
    userDetails?: UserDetails;
}

/**
 * 
 */
export class CoreApi extends runtime.BaseAPI {

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     */
    async createLoginRaw(requestParameters: CreateLoginRequest): Promise<runtime.ApiResponse<JWT>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginToJSON(requestParameters.login),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTFromJSON(jsonValue));
    }

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object\'s key.
     */
    async createLogin(requestParameters: CreateLoginRequest): Promise<JWT> {
        const response = await this.createLoginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     */
    async createLogoutRaw(requestParameters: CreateLogoutRequest): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/logout/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     */
    async createLogout(requestParameters: CreateLogoutRequest): Promise<any> {
        const response = await this.createLogoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     */
    async createPasswordChangeRaw(requestParameters: CreatePasswordChangeRequest): Promise<runtime.ApiResponse<PasswordChange>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/password/change/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordChangeToJSON(requestParameters.passwordChange),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordChangeFromJSON(jsonValue));
    }

    /**
     * Calls Django Auth SetPasswordForm save method.  Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     */
    async createPasswordChange(requestParameters: CreatePasswordChangeRequest): Promise<PasswordChange> {
        const response = await this.createPasswordChangeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     */
    async createPasswordResetRaw(requestParameters: CreatePasswordResetRequest): Promise<runtime.ApiResponse<PasswordReset>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/password/reset/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetToJSON(requestParameters.passwordReset),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetFromJSON(jsonValue));
    }

    /**
     * Calls Django Auth PasswordResetForm save method.  Accepts the following POST parameters: email Returns the success/fail message.
     */
    async createPasswordReset(requestParameters: CreatePasswordResetRequest): Promise<PasswordReset> {
        const response = await this.createPasswordResetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     */
    async createPasswordResetConfirmRaw(requestParameters: CreatePasswordResetConfirmRequest): Promise<runtime.ApiResponse<PasswordResetConfirm>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/password/reset/confirm/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetConfirmToJSON(requestParameters.passwordResetConfirm),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordResetConfirmFromJSON(jsonValue));
    }

    /**
     * Password reset e-mail link is confirmed, therefore this resets the user\'s password.  Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     */
    async createPasswordResetConfirm(requestParameters: CreatePasswordResetConfirmRequest): Promise<PasswordResetConfirm> {
        const response = await this.createPasswordResetConfirmRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createRegisterRaw(requestParameters: CreateRegisterRequest): Promise<runtime.ApiResponse<JWT>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/registration/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterToJSON(requestParameters.register),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => JWTFromJSON(jsonValue));
    }

    /**
     */
    async createRegister(requestParameters: CreateRegisterRequest): Promise<JWT> {
        const response = await this.createRegisterRaw(requestParameters);
        return await response.value();
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     */
    async createTokenObtainPairRaw(requestParameters: CreateTokenObtainPairRequest): Promise<runtime.ApiResponse<TokenObtainPair>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/token/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenObtainPairToJSON(requestParameters.tokenObtainPair),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenObtainPairFromJSON(jsonValue));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     */
    async createTokenObtainPair(requestParameters: CreateTokenObtainPairRequest): Promise<TokenObtainPair> {
        const response = await this.createTokenObtainPairRaw(requestParameters);
        return await response.value();
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     */
    async createTokenRefreshRaw(requestParameters: CreateTokenRefreshRequest): Promise<runtime.ApiResponse<TokenRefresh>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/token/refresh/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRefreshToJSON(requestParameters.tokenRefresh),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenRefreshFromJSON(jsonValue));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     */
    async createTokenRefresh(requestParameters: CreateTokenRefreshRequest): Promise<TokenRefresh> {
        const response = await this.createTokenRefreshRaw(requestParameters);
        return await response.value();
    }

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     */
    async createTokenVerifyRaw(requestParameters: CreateTokenVerifyRequest): Promise<runtime.ApiResponse<TokenVerify>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/token/verify/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenVerifyToJSON(requestParameters.tokenVerify),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenVerifyFromJSON(jsonValue));
    }

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     */
    async createTokenVerify(requestParameters: CreateTokenVerifyRequest): Promise<TokenVerify> {
        const response = await this.createTokenVerifyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createVerifyEmailRaw(requestParameters: CreateVerifyEmailRequest): Promise<runtime.ApiResponse<VerifyEmail>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/registration/verify-email/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyEmailToJSON(requestParameters.verifyEmail),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyEmailFromJSON(jsonValue));
    }

    /**
     */
    async createVerifyEmail(requestParameters: CreateVerifyEmailRequest): Promise<VerifyEmail> {
        const response = await this.createVerifyEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     */
    async listLogoutsRaw(): Promise<runtime.ApiResponse<Array<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/core/api/v1/logout/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.  Accepts/Returns nothing.
     */
    async listLogouts(): Promise<Array<any>> {
        const response = await this.listLogoutsRaw();
        return await response.value();
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     */
    async partialUpdateUserDetailsRaw(requestParameters: PartialUpdateUserDetailsRequest): Promise<runtime.ApiResponse<UserDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/user/`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserDetailsToJSON(requestParameters.userDetails),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     */
    async partialUpdateUserDetails(requestParameters: PartialUpdateUserDetailsRequest): Promise<UserDetails> {
        const response = await this.partialUpdateUserDetailsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     */
    async retrieveUserDetailsRaw(): Promise<runtime.ApiResponse<UserDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/core/api/v1/user/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     */
    async retrieveUserDetails(): Promise<UserDetails> {
        const response = await this.retrieveUserDetailsRaw();
        return await response.value();
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     */
    async updateUserDetailsRaw(requestParameters: UpdateUserDetailsRequest): Promise<runtime.ApiResponse<UserDetails>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/core/api/v1/user/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserDetailsToJSON(requestParameters.userDetails),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsFromJSON(jsonValue));
    }

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.  Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     */
    async updateUserDetails(requestParameters: UpdateUserDetailsRequest): Promise<UserDetails> {
        const response = await this.updateUserDetailsRaw(requestParameters);
        return await response.value();
    }

}
